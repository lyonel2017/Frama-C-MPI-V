(* this is the prelude for Alt-Ergo, version >= 2.3.0 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

axiom CompatOrderMult :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))

type 'a option

logic None : 'a option

logic Some : 'a -> 'a option

logic match_option : 'a option, 'a1, 'a1 -> 'a1

axiom match_option_None :
  (forall z:'a. forall z1:'a. (match_option((None : 'a1 option), z, z1) = z))

axiom match_option_Some :
  (forall z:'a. forall z1:'a. forall u:'a1. (match_option(Some(u), z,
  z1) = z1))

logic index_option : 'a option -> int

axiom index_option_None : (index_option((None : 'a option)) = 0)

axiom index_option_Some :
  (forall u:'a [Some(u)]. (index_option(Some(u)) = 1))

logic Some_proj_1 : 'a option -> 'a

axiom Some_proj_1qtdef : (forall u:'a. (Some_proj_1(Some(u)) = u))

axiom option_inversion :
  (forall u:'a option. ((u = (None : 'a option)) or
  (u = Some(Some_proj_1(u)))))

predicate is_none(o: 'a option) = (forall x:'a. (not (o = Some(x))))

axiom is_noneqtspec :
  (forall o:'a option. (is_none(o) -> (o = (None : 'a option))))

axiom is_noneqtspec1 :
  (forall o:'a option. ((o = (None : 'a option)) -> is_none(o)))

type mpi_type = MPI_int | MPI_char

logic match_mpi_type : mpi_type, 'a, 'a -> 'a

axiom match_mpi_type_MPI_int :
  (forall z:'a. forall z1:'a. (match_mpi_type(MPI_int, z, z1) = z))

axiom match_mpi_type_MPI_char :
  (forall z:'a. forall z1:'a. (match_mpi_type(MPI_char, z, z1) = z1))

type protocol

logic Message : int, int, mpi_type -> protocol

logic Foreach : int, int, (int,protocol) farray -> protocol

logic While : int, protocol -> protocol

logic Seq : protocol, protocol -> protocol

logic Skip : protocol

logic match_protocol : protocol, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_protocol_Message :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall u:int. forall u1:int. forall u2:mpi_type. (match_protocol(Message(u,
  u1, u2), z, z1, z2, z3, z4) = z))

axiom match_protocol_Foreach :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall u:int. forall u1:int. forall u2:(int,protocol) farray.
  (match_protocol(Foreach(u, u1, u2), z, z1, z2, z3, z4) = z1))

axiom match_protocol_While :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall u:int. forall u1:protocol. (match_protocol(While(u, u1), z, z1, z2,
  z3, z4) = z2))

axiom match_protocol_Seq :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall u:protocol. forall u1:protocol. (match_protocol(Seq(u, u1), z, z1,
  z2, z3, z4) = z3))

axiom match_protocol_Skip :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_protocol(Skip, z, z1, z2, z3, z4) = z4))

logic index_protocol : protocol -> int

axiom index_protocol_Message :
  (forall u:int. forall u1:int. forall u2:mpi_type [Message(u, u1, u2)].
  (index_protocol(Message(u, u1, u2)) = 0))

axiom index_protocol_Foreach :
  (forall u:int. forall u1:int. forall u2:(int,protocol) farray [Foreach(u,
  u1, u2)]. (index_protocol(Foreach(u, u1, u2)) = 1))

axiom index_protocol_While :
  (forall u:int. forall u1:protocol [While(u, u1)]. (index_protocol(While(u,
  u1)) = 2))

axiom index_protocol_Seq :
  (forall u:protocol. forall u1:protocol [Seq(u, u1)]. (index_protocol(Seq(u,
  u1)) = 3))

axiom index_protocol_Skip : (index_protocol(Skip) = 4)

logic Message_proj_1 : protocol -> int

axiom Message_proj_1qtdef :
  (forall u:int. forall u1:int. forall u2:mpi_type.
  (Message_proj_1(Message(u, u1, u2)) = u))

logic Message_proj_2 : protocol -> int

axiom Message_proj_2qtdef :
  (forall u:int. forall u1:int. forall u2:mpi_type.
  (Message_proj_2(Message(u, u1, u2)) = u1))

logic Message_proj_3 : protocol -> mpi_type

axiom Message_proj_3qtdef :
  (forall u:int. forall u1:int. forall u2:mpi_type.
  (Message_proj_3(Message(u, u1, u2)) = u2))

logic Foreach_proj_1 : protocol -> int

axiom Foreach_proj_1qtdef :
  (forall u:int. forall u1:int. forall u2:(int,protocol) farray.
  (Foreach_proj_1(Foreach(u, u1, u2)) = u))

logic Foreach_proj_2 : protocol -> int

axiom Foreach_proj_2qtdef :
  (forall u:int. forall u1:int. forall u2:(int,protocol) farray.
  (Foreach_proj_2(Foreach(u, u1, u2)) = u1))

logic Foreach_proj_3 : protocol -> (int,protocol) farray

axiom Foreach_proj_3qtdef :
  (forall u:int. forall u1:int. forall u2:(int,protocol) farray.
  (Foreach_proj_3(Foreach(u, u1, u2)) = u2))

logic While_proj_1 : protocol -> int

axiom While_proj_1qtdef :
  (forall u:int. forall u1:protocol. (While_proj_1(While(u, u1)) = u))

logic While_proj_2 : protocol -> protocol

axiom While_proj_2qtdef :
  (forall u:int. forall u1:protocol. (While_proj_2(While(u, u1)) = u1))

logic Seq_proj_1 : protocol -> protocol

axiom Seq_proj_1qtdef :
  (forall u:protocol. forall u1:protocol. (Seq_proj_1(Seq(u, u1)) = u))

logic Seq_proj_2 : protocol -> protocol

axiom Seq_proj_2qtdef :
  (forall u:protocol. forall u1:protocol. (Seq_proj_2(Seq(u, u1)) = u1))

axiom protocol_inversion :
  (forall u:protocol. (((((u = Message(Message_proj_1(u), Message_proj_2(u),
  Message_proj_3(u))) or (u = Foreach(Foreach_proj_1(u), Foreach_proj_2(u),
  Foreach_proj_3(u)))) or (u = While(While_proj_1(u), While_proj_2(u)))) or
  (u = Seq(Seq_proj_1(u), Seq_proj_2(u)))) or (u = Skip)))

logic rank : int

logic size : int

type mpi_protocol = { p : protocol
}

logic simpl : protocol -> protocol

axiom simplqtdef :
  (forall x:int. forall x1:int. forall x2:mpi_type. (((not (rank = x)) and
  (not (rank = x1))) -> (simpl(Message(x, x1, x2)) = Skip)))

axiom simplqtdef1 :
  (forall x:int. forall x1:int. forall x2:mpi_type. (let p1 = Message(x, x1,
  x2) : protocol in ((not ((not (rank = x)) and (not (rank = x1)))) ->
  (simpl(p1) = p1))))

axiom simplqtdef2 :
  (forall x:int. forall x1:int. forall x2:(int,protocol) farray.
  ((x <= x1) -> (simpl(Foreach(x, x1, x2)) = Seq((x2[x]), Foreach((x + 1),
  x1, x2)))))

axiom simplqtdef3 :
  (forall x:int. forall x1:int. forall x2:(int,protocol) farray.
  ((not (x <= x1)) -> (simpl(Foreach(x, x1, x2)) = Skip)))

axiom simplqtdef4 :
  (forall x:int. forall x1:protocol. ((x <  0) -> (simpl(While(x,
  x1)) = Skip)))

axiom simplqtdef5 :
  (forall x:int. forall x1:protocol. ((not (x <  0)) -> (simpl(While(x,
  x1)) = Seq(x1, While((x - 1), x1)))))

axiom simplqtdef6 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:int. forall w2:mpi_type. ((x1 = Message(w, w1,
  w2)) ->
  (forall w3:int. forall w4:int. forall w5:mpi_type. ((x = Message(w3, w4,
  w5)) -> (simpl(Seq(x, x1)) = Seq(simpl(x), x1)))))))

axiom simplqtdef7 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:int. forall w2:mpi_type. ((x1 = Message(w, w1,
  w2)) ->
  (forall w3:int. forall w4:int. forall w5:(int,protocol) farray.
  ((x = Foreach(w3, w4, w5)) -> (simpl(Seq(x, x1)) = Seq(simpl(x), x1)))))))

axiom simplqtdef8 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:int. forall w2:mpi_type. ((x1 = Message(w, w1,
  w2)) ->
  (forall w3:int. forall w4:protocol. ((x = While(w3, w4)) -> (simpl(Seq(x,
  x1)) = Seq(simpl(x), x1)))))))

axiom simplqtdef9 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:int. forall w2:mpi_type. ((x1 = Message(w, w1,
  w2)) ->
  (forall w3:protocol. forall w4:protocol. ((x = Seq(w3, w4)) ->
  (simpl(Seq(x, x1)) = Seq(simpl(x), x1)))))))

axiom simplqtdef10 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:int. forall w2:mpi_type. ((x1 = Message(w, w1,
  w2)) -> ((x = Skip) -> (simpl(Seq(x, x1)) = x1)))))

axiom simplqtdef11 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:int. forall w2:(int,protocol) farray.
  ((x1 = Foreach(w, w1, w2)) ->
  (forall w3:int. forall w4:int. forall w5:mpi_type. ((x = Message(w3, w4,
  w5)) -> (simpl(Seq(x, x1)) = Seq(simpl(x), x1)))))))

axiom simplqtdef12 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:int. forall w2:(int,protocol) farray.
  ((x1 = Foreach(w, w1, w2)) ->
  (forall w3:int. forall w4:int. forall w5:(int,protocol) farray.
  ((x = Foreach(w3, w4, w5)) -> (simpl(Seq(x, x1)) = Seq(simpl(x), x1)))))))

axiom simplqtdef13 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:int. forall w2:(int,protocol) farray.
  ((x1 = Foreach(w, w1, w2)) ->
  (forall w3:int. forall w4:protocol. ((x = While(w3, w4)) -> (simpl(Seq(x,
  x1)) = Seq(simpl(x), x1)))))))

axiom simplqtdef14 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:int. forall w2:(int,protocol) farray.
  ((x1 = Foreach(w, w1, w2)) ->
  (forall w3:protocol. forall w4:protocol. ((x = Seq(w3, w4)) ->
  (simpl(Seq(x, x1)) = Seq(simpl(x), x1)))))))

axiom simplqtdef15 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:int. forall w2:(int,protocol) farray.
  ((x1 = Foreach(w, w1, w2)) -> ((x = Skip) -> (simpl(Seq(x, x1)) = x1)))))

axiom simplqtdef16 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:protocol. ((x1 = While(w, w1)) ->
  (forall w2:int. forall w3:int. forall w4:mpi_type. ((x = Message(w2, w3,
  w4)) -> (simpl(Seq(x, x1)) = Seq(simpl(x), x1)))))))

axiom simplqtdef17 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:protocol. ((x1 = While(w, w1)) ->
  (forall w2:int. forall w3:int. forall w4:(int,protocol) farray.
  ((x = Foreach(w2, w3, w4)) -> (simpl(Seq(x, x1)) = Seq(simpl(x), x1)))))))

axiom simplqtdef18 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:protocol. ((x1 = While(w, w1)) ->
  (forall w2:int. forall w3:protocol. ((x = While(w2, w3)) -> (simpl(Seq(x,
  x1)) = Seq(simpl(x), x1)))))))

axiom simplqtdef19 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:protocol. ((x1 = While(w, w1)) ->
  (forall w2:protocol. forall w3:protocol. ((x = Seq(w2, w3)) ->
  (simpl(Seq(x, x1)) = Seq(simpl(x), x1)))))))

axiom simplqtdef20 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:protocol. ((x1 = While(w, w1)) -> ((x = Skip) ->
  (simpl(Seq(x, x1)) = x1)))))

axiom simplqtdef21 :
  (forall x:protocol. forall x1:protocol.
  (forall w:protocol. forall w1:protocol. ((x1 = Seq(w, w1)) ->
  (forall w2:int. forall w3:int. forall w4:mpi_type. ((x = Message(w2, w3,
  w4)) -> (simpl(Seq(x, x1)) = Seq(simpl(x), x1)))))))

axiom simplqtdef22 :
  (forall x:protocol. forall x1:protocol.
  (forall w:protocol. forall w1:protocol. ((x1 = Seq(w, w1)) ->
  (forall w2:int. forall w3:int. forall w4:(int,protocol) farray.
  ((x = Foreach(w2, w3, w4)) -> (simpl(Seq(x, x1)) = Seq(simpl(x), x1)))))))

axiom simplqtdef23 :
  (forall x:protocol. forall x1:protocol.
  (forall w:protocol. forall w1:protocol. ((x1 = Seq(w, w1)) ->
  (forall w2:int. forall w3:protocol. ((x = While(w2, w3)) -> (simpl(Seq(x,
  x1)) = Seq(simpl(x), x1)))))))

axiom simplqtdef24 :
  (forall x:protocol. forall x1:protocol.
  (forall w:protocol. forall w1:protocol. ((x1 = Seq(w, w1)) ->
  (forall w2:protocol. forall w3:protocol. ((x = Seq(w2, w3)) ->
  (simpl(Seq(x, x1)) = Seq(simpl(x), x1)))))))

axiom simplqtdef25 :
  (forall x:protocol. forall x1:protocol.
  (forall w:protocol. forall w1:protocol. ((x1 = Seq(w, w1)) ->
  ((x = Skip) -> (simpl(Seq(x, x1)) = x1)))))

axiom simplqtdef26 :
  (forall x:protocol. forall x1:protocol. ((x1 = Skip) ->
  (forall w:int. forall w1:int. forall w2:mpi_type. ((x = Message(w, w1,
  w2)) -> (simpl(Seq(x, x1)) = x)))))

axiom simplqtdef27 :
  (forall x:protocol. forall x1:protocol. ((x1 = Skip) ->
  (forall w:int. forall w1:int. forall w2:(int,protocol) farray.
  ((x = Foreach(w, w1, w2)) -> (simpl(Seq(x, x1)) = x)))))

axiom simplqtdef28 :
  (forall x:protocol. forall x1:protocol. ((x1 = Skip) ->
  (forall w:int. forall w1:protocol. ((x = While(w, w1)) -> (simpl(Seq(x,
  x1)) = x)))))

axiom simplqtdef29 :
  (forall x:protocol. forall x1:protocol. ((x1 = Skip) ->
  (forall w:protocol. forall w1:protocol. ((x = Seq(w, w1)) -> (simpl(Seq(x,
  x1)) = x)))))

axiom simplqtdef30 :
  (forall x:protocol. forall x1:protocol. ((x1 = Skip) -> ((x = Skip) ->
  (simpl(Seq(x, x1)) = x1))))

axiom simplqtdef31 : (let p1 = Skip : protocol in (simpl(p1) = p1))

predicate isSkip(p1: protocol) =
  ((((forall w:int. forall w1:int. forall w2:mpi_type. (not (p1 = Message(w,
     w1, w2)))) and
  (forall w:int. forall w1:int. forall w2:(int,protocol) farray.
  (not (p1 = Foreach(w, w1, w2))))) and
  (forall w:int. forall w1:protocol. (not (p1 = While(w, w1))))) and
  (forall w:protocol. forall w1:protocol. (not (p1 = Seq(w, w1)))))

function split(p1: protocol, c: int) : protocol = match_protocol(p1, p1,
  (if ((Foreach_proj_1(p1) <= c) and
  (c <= Foreach_proj_2(p1))) then Seq(Foreach(Foreach_proj_1(p1), (c - 1),
  Foreach_proj_3(p1)), Foreach(c, Foreach_proj_2(p1),
  Foreach_proj_3(p1))) else p1),
  (if (c <  While_proj_1(p1)) then Seq(While(c, While_proj_2(p1)),
  While((While_proj_1(p1) - c), While_proj_2(p1))) else p1), p1, p1)

function matches(t: mpi_type, d: mpi_type) : bool = match_mpi_type(d,
  match_mpi_type(t, true, false), false)

predicate isMessage(p1: protocol) =
  ((((forall w:int. forall w1:int. forall w2:(int,protocol) farray.
     (not (p1 = Foreach(w, w1, w2)))) and
  (forall w:int. forall w1:protocol. (not (p1 = While(w, w1))))) and
  (forall w:protocol. forall w1:protocol. (not (p1 = Seq(w, w1))))) and
  (not (p1 = Skip)))

predicate isMessageforSend(p1: protocol, dest: int, t: mpi_type) =
  (((((forall x:int. forall x1:int. forall x2:mpi_type. ((p1 = Message(x, x1,
      x2)) -> ((x = rank) and ((dest = x1) and (matches(t, x2) = true))))) and
  (forall w:int. forall w1:int. forall w2:(int,protocol) farray.
  (not (p1 = Foreach(w, w1, w2))))) and
  (forall w:int. forall w1:protocol. (not (p1 = While(w, w1))))) and
  (forall w:protocol. forall w1:protocol. (not (p1 = Seq(w, w1))))) and
  (not (p1 = Skip)))

predicate isMessageforRecv(p1: protocol, source: int, t: mpi_type) =
  (((((forall x:int. forall x1:int. forall x2:mpi_type. ((p1 = Message(x, x1,
      x2)) -> ((x = source) and ((x1 = rank) and (matches(t, x2) = true))))) and
  (forall w:int. forall w1:int. forall w2:(int,protocol) farray.
  (not (p1 = Foreach(w, w1, w2))))) and
  (forall w:int. forall w1:protocol. (not (p1 = While(w, w1))))) and
  (forall w:protocol. forall w1:protocol. (not (p1 = Seq(w, w1))))) and
  (not (p1 = Skip)))

predicate isForeach(p1: protocol) =
  ((((forall w:int. forall w1:int. forall w2:mpi_type. (not (p1 = Message(w,
     w1, w2)))) and
  (forall w:int. forall w1:protocol. (not (p1 = While(w, w1))))) and
  (forall w:protocol. forall w1:protocol. (not (p1 = Seq(w, w1))))) and
  (not (p1 = Skip)))

predicate isForeachSkip(p1: protocol) =
  ((((forall w:int. forall w1:int. forall w2:mpi_type. (not (p1 = Message(w,
     w1, w2)))) and
  (forall x:int. forall x1:int. forall x2:(int,protocol) farray.
  ((p1 = Foreach(x, x1, x2)) ->
  (forall i:int. (((x <= i) and (i <= x1)) -> isSkip(simpl((x2[i])))))))) and
  (forall w:int. forall w1:protocol. (not (p1 = While(w, w1))))) and
  (forall w:protocol. forall w1:protocol. (not (p1 = Seq(w, w1)))))

logic getFirst : protocol -> protocol

axiom getFirstqtdef :
  (forall w:int. forall w1:int. forall w2:mpi_type. (let p1 = Message(w, w1,
  w2) : protocol in (getFirst(p1) = p1)))

axiom getFirstqtdef1 :
  (forall w:int. forall w1:int. forall w2:(int,protocol) farray. (let p1 =
  Foreach(w, w1, w2) : protocol in (getFirst(p1) = p1)))

axiom getFirstqtdef2 :
  (forall w:int. forall w1:protocol. (let p1 = While(w, w1) : protocol in
  (getFirst(p1) = p1)))

axiom getFirstqtdef3 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:int. forall w2:mpi_type. ((x = Message(w, w1,
  w2)) -> (getFirst(Seq(x, x1)) = x))))

axiom getFirstqtdef4 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:int. forall w2:(int,protocol) farray.
  ((x = Foreach(w, w1, w2)) -> (getFirst(Seq(x, x1)) = x))))

axiom getFirstqtdef5 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:protocol. ((x = While(w, w1)) -> (getFirst(Seq(x,
  x1)) = x))))

axiom getFirstqtdef6 :
  (forall x:protocol. forall x1:protocol.
  (forall x2:protocol. forall x3:protocol. ((x = Seq(x2, x3)) ->
  (getFirst(Seq(x, x1)) = getFirst(Seq(x2, x3))))))

axiom getFirstqtdef7 :
  (forall x:protocol. forall x1:protocol. ((x = Skip) -> (getFirst(Seq(x,
  x1)) = x)))

axiom getFirstqtdef8 : (let p1 = Skip : protocol in (getFirst(p1) = p1))

logic getNext : protocol -> protocol

axiom getNextqtdef :
  (forall w:int. forall w1:int. forall w2:mpi_type. (getNext(Message(w, w1,
  w2)) = Skip))

axiom getNextqtdef1 :
  (forall w:int. forall w1:int. forall w2:(int,protocol) farray.
  (getNext(Foreach(w, w1, w2)) = Skip))

axiom getNextqtdef2 :
  (forall w:int. forall w1:protocol. (getNext(While(w, w1)) = Skip))

axiom getNextqtdef3 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:int. forall w2:mpi_type. ((x = Message(w, w1,
  w2)) -> (getNext(Seq(x, x1)) = x1))))

axiom getNextqtdef4 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:int. forall w2:(int,protocol) farray.
  ((x = Foreach(w, w1, w2)) -> (getNext(Seq(x, x1)) = x1))))

axiom getNextqtdef5 :
  (forall x:protocol. forall x1:protocol.
  (forall w:int. forall w1:protocol. ((x = While(w, w1)) -> (getNext(Seq(x,
  x1)) = x1))))

axiom getNextqtdef6 :
  (forall x:protocol. forall x1:protocol.
  (forall x2:protocol. forall x3:protocol. ((x = Seq(x2, x3)) ->
  (getNext(Seq(x, x1)) = Seq(getNext(Seq(x2, x3)), x1)))))

axiom getNextqtdef7 :
  (forall x:protocol. forall x1:protocol. ((x = Skip) -> (getNext(Seq(x,
  x1)) = x1)))

axiom getNextqtdef8 : (getNext(Skip) = Skip)

logic finalize : mpi_protocol -> unit

axiom Requires : (20 <= size)

logic p1 : protocol

logic o : (int,protocol) farray

axiom oqtdef : (forall i:int. ((o[i]) = Message(i, (i + 10), MPI_int)))

axiom Ensures : (p1 = Foreach(0, 9, o))

axiom H : (0 <= rank)

axiom H1 : (rank <  size)

axiom H2 : (rank <  5)

logic p2 : protocol

axiom Ensures1 : (p2 = split(p1, rank))

logic p3 : protocol

axiom Ensures2 : (p3 = getNext(p2))

logic fc : (int,protocol) farray

axiom fcqtdef : (forall i:int. ((fc[i]) = Message(i, (i + 10), MPI_int)))

goal test2qtvc : (p3 = Foreach(rank, 9, fc))
