(**************************************************************************)
(*  This file is part of MPI-V plug-in of Frama-C.                        *)
(*                                                                        *)
(*  Copyright (C) 2020 Lionel Blatter                                     *)
(*                                                                        *)
(*  Lionel Blatter <lionel.blatter@kit.edu>                               *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 2.1                 *)
(*  for more details (enclosed in the file LICENSE).                      *)
(**************************************************************************)

module MPI_Protocol

use frama_c_wp.vlist.Vlist
(* use list.List *)

type mpi_datatype =
| MPI_char
| MPI_int
| MPI_float 

type mpi_op =
| MPI_sum

val constant size : int

type protocol =
  | IntMessage int int int int (list int -> bool)
    (* ++ sender and recever can go into the predicate.
          Moreover information lenght data = count*)
  | IntBroadcast int int (list int -> bool) (list int  -> protocol)
    (* ++ the root can go into the predicate and into the continuation.
          Moreoverlenght data = count*)
  | IntGhostBroadcast int int (list int -> bool) (list int  -> protocol)
  | Gather int int mpi_datatype
  | Scatter int int mpi_datatype
  | Reduce int int mpi_datatype mpi_op
  | Foreach int int (int -> protocol)
  | While int protocol

(* Wildcard (int -> bool) (int -> bool) int int int subprotocol
	- only consume if the predicate is false for the rank of the source and false for any rank
          for the targed.
	- the source is not specified in the protocol
	- we make a projection of the communication condition.
	- the check of validity of the predication is done after a communication has take place.
        - the received data must be expressed by a predicate valid for in any case
        - in addition we have a predicate telling if I have to take place to the communication,
          if not am not autorised to
          communicate with the target
        - subprotocol is the protocol in the protocol
*)

  | If bool protocol protocol
  | Seq protocol protocol
  | Skip

end

module MPI_Protocol_Handler

use int.Int
use option.Option
use array.Array
use MPI_Protocol
use frama_c_wp.vlist.Vlist
(* use list.List *)

val constant rank : int

let constant get_mpi_char : mpi_datatype = MPI_char
let constant get_mpi_int : mpi_datatype = MPI_int
let constant get_mpi_float: mpi_datatype = MPI_float 

let constant get_mpi_sum : mpi_op = MPI_sum

(* -------------------------------------------------------------------- *)
(* --- seq                                                          --- *)
(* -------------------------------------------------------------------- *)

function seq (p1: protocol) (p2: protocol): protocol = Seq p1 p2


(* -------------------------------------------------------------------- *)
(* --- isMessageforIntSend                                          --- *)
(* -------------------------------------------------------------------- *)

predicate isIntMessage (p:protocol)

axiom IsIntMessage: forall src dst data_size t: int, pre: list int -> bool.
      isIntMessage (IntMessage src dst data_size t pre)

(* -------------------------------------------------------------------- *)
(* --- isIntBroadcast                                               --- *)
(* -------------------------------------------------------------------- *)

predicate isIntBroadcast (p: protocol)

axiom IsIntBroadcast: forall r data_size: int, pred: (list int -> bool), cont: (list int  -> protocol).
      isIntBroadcast (IntBroadcast r data_size pred cont)

(* -------------------------------------------------------------------- *)
(* --- isGather                                                     --- *)
(* -------------------------------------------------------------------- *)

predicate isGather (p: protocol)

axiom IsGather: forall r data_size: int, mt: mpi_datatype.
      isGather (Gather r data_size mt)

(* -------------------------------------------------------------------- *)
(* --- isScatter                                                    --- *)
(* -------------------------------------------------------------------- *)

predicate isScatter (p: protocol)

axiom IsScatter: forall r data_size: int, mt: mpi_datatype.
      isScatter (Scatter r data_size mt)

(* -------------------------------------------------------------------- *)
(* --- isReduce                                                    --- *)
(* -------------------------------------------------------------------- *)

predicate isReduce (p: protocol)

axiom IsReduce: forall r data_size: int, mt: mpi_datatype, op: mpi_op.
      isReduce(Reduce r data_size mt op)

(* -------------------------------------------------------------------- *)
(* --- isForeach                                                    --- *)
(* -------------------------------------------------------------------- *)

predicate isForeach (p: protocol)

axiom IsForeach: forall low high: int, body: int -> protocol.
      isForeach (Foreach low high body)

(* -------------------------------------------------------------------- *)
(* --- isSkip                                                       --- *)
(* -------------------------------------------------------------------- *)

predicate isSkip (p: protocol)

axiom IsSkip:  isSkip (Skip)

(* -------------------------------------------------------------------- *)
(* --- IntSend                                          --- *)
(* -------------------------------------------------------------------- *)

(* --- isMessageforIntSend                                          --- *)

predicate isMessageforIntSend (p:protocol) (dest: int) (count: int) (tag: int) (data: list int)

axiom isforIntSend: forall dest count tag : int, src dst data_size t: int,
                           data: list int, pre: list int -> bool.
      (*Well define session type*)
      0 <= src /\ src < size /\ 0 <= dst /\ dst < size /\ dst <> src /\
      (*Typecheck IntSend*)
      src = rank /\ dest = dst /\ data_size = count /\ tag = t (*/\ pre data*) ->
      isMessageforIntSend (IntMessage src dst data_size t pre) dest count tag data

(* --- isPredIntMessage                                               --- *)

predicate isPredIntMessage (p: protocol) (data: list int)

axiom isPredIntMessage: forall src dst data_size t: int, data: list int, pre: list int -> bool.
      pre data ->
      isPredIntMessage (IntMessage src dst data_size t pre) data

(* -------------------------------------------------------------------- *)
(* --- IntRecv                                                      --- *)
(* -------------------------------------------------------------------- *)

(* --- isMessageforIntRecv                                          --- *)

predicate isMessageforIntRecv (p:protocol) (source: int) (count: int) (tag: int)

axiom isforIntRecv: forall source count tag: int, src dst data_size t: int, pre: list int -> bool.
      (*Well define session type*)
      0 <= src /\ src < size /\ 0 <= dst /\ dst < size /\ dst <> src /\
      (*Check is Message for IntSend *)
      (*Typecheck IntRecv*)
      src = source /\ dst = rank /\ data_size = count /\ tag = t  ->
      isMessageforIntRecv (IntMessage src dst data_size t pre) source count tag

(* --- predIntMessage                                               --- *)

predicate predIntMessage (p: protocol) (data: list int)

axiom PredIntMessage: forall src dst data_size t: int, data: list int, pre: list int -> bool.
      predIntMessage (IntMessage src dst data_size t pre) data -> pre data

(* -------------------------------------------------------------------- *)
(* --- IntBroadcast                                            --- *)
(* -------------------------------------------------------------------- *)

(* --- isforIntBroadcast                                            --- *)

predicate isforIntBroadcast (p: protocol) (root: int) (count: int) (data: list int)

axiom isIntBroadcast: forall root r count data_size : int, data : (list int),
                            pred: (list int -> bool), cont: (list int  -> protocol).
      (*Well define session type*)
      0 <= r /\ r < size /\
      (*Typecheck IntBroadcast*)
      root = r /\  data_size = count /\ (rank = root -> pred data) ->
      isforIntBroadcast (IntBroadcast r data_size pred cont) root count data

(* --- isforIntGhostBroadcast                                       --- *)

predicate isforIntGhostBroadcast (p: protocol) (root: int) (count: int) (data: list int)

axiom isIntGhostBroadcast: forall root r count data_size : int, data : (list int),
                            pred: (list int -> bool), cont: (list int  -> protocol).
      (*Well define session type*)
      0 <= r /\ r < size /\
      (*Typecheck InGhostBroadcast*)
      root = r /\  data_size = count /\ (rank = root -> pred data) ->
      isforIntGhostBroadcast (IntGhostBroadcast r data_size pred cont) root count data

(* --- predIntBroadcast                                             --- *)

predicate predIntBroadcast (p: protocol) (data: list int)

axiom PredIntBroadcast:
   forall r data_size: int, pred: (list int -> bool), cont: (list int  -> protocol), data: list int.
      predIntBroadcast (IntBroadcast r data_size pred cont) data -> pred data

axiom PredIntGhostBroadcast:
   forall r data_size: int, pred: (list int -> bool), cont: (list int  -> protocol), data: list int.
      predIntBroadcast (IntGhostBroadcast r data_size pred cont) data -> pred data

(* --- countiIntBroadcast                                           --- *)

predicate countiIntBroadcast (old_f: protocol) (old_n: protocol) (new_p: protocol) (data: list int)

axiom CountiIntBroadcast:
   forall r data_size: int, pred: (list int -> bool),
          cont: (list int  -> protocol), data: list int,
          old_n new_p: protocol.
      countiIntBroadcast (IntBroadcast r data_size pred cont) old_n new_p data ->
             new_p = Seq (cont data) old_n

axiom CountiIntGhostBroadcast:
   forall r data_size: int, pred: (list int -> bool),
          cont: (list int  -> protocol), data: list int,
          old_n new_p: protocol.
      countiIntBroadcast (IntGhostBroadcast r data_size pred cont) old_n new_p data ->
             new_p = Seq (cont data) old_n

(* -------------------------------------------------------------------- *)
(* --- isforGather                                                 --- *)
(* -------------------------------------------------------------------- *)

predicate isforGather (p: protocol) (root: int) (count: int) (datatype: mpi_datatype)

axiom isGather: forall root r count data_size : int, datatype mt : mpi_datatype.
      (*Well define session type*)
      0 <= r /\ r < size /\
      (*Typecheck Gather*)
      root = r /\  data_size = count /\ datatype = mt  ->
      isforGather (Gather r data_size mt) root count datatype

(* -------------------------------------------------------------------- *)
(* --- isforScatter                                                 --- *)
(* -------------------------------------------------------------------- *)

predicate isforScatter (p: protocol) (root: int) (count: int) (datatype: mpi_datatype)

axiom isScatter: forall root r count data_size : int, datatype mt : mpi_datatype.
      (*Well define session type*)
      0 <= r /\ r < size /\
      (*Typecheck Scatter*)
      root = r /\  data_size = count /\ datatype = mt  ->
      isforScatter (Scatter r data_size mt) root count datatype

(* -------------------------------------------------------------------- *)
(* --- isforReduce                                                 --- *)
(* -------------------------------------------------------------------- *)

predicate isforReduce (p: protocol) (root: int) (count: int) (datatype: mpi_datatype) (opera: mpi_op)

axiom isReduce: forall root r count data_size: int, datatype mt : mpi_datatype, op opera : mpi_op.
      (*Well define session type*)
      0 <= r /\ r < size /\
      (*Typecheck Scatter*)
      root = r /\ data_size = count /\ datatype = mt /\ opera = op ->
      isforReduce (Reduce r data_size mt op) root count datatype opera

(* -------------------------------------------------------------------- *)
(* --- simpl                                                        --- *)
(* -------------------------------------------------------------------- *)

function simpl (p: protocol) : protocol

axiom simpl_seq_1: forall p: protocol. simpl(Seq Skip p) = p

axiom simpl_seq_2: forall p: protocol. simpl(Seq p Skip) = p

axiom simp_if_true: forall b:bool, p1 p2: protocol. b -> simpl(If b p1 p2) = p1

axiom simp_if_false: forall b:bool, p1 p2: protocol. not b -> simpl(If b p1 p2) = p2

axiom simpl_intmessage: forall source dest data_size tag: int, pre: (list int -> bool).
      (*Well define session type*)
      0 <= source /\ source < size /\  0 <= dest /\ dest < size /\ dest <> source /\
      (*The message does not concern rank*)
      rank <> source /\ rank <> dest ->
      simpl(IntMessage source dest data_size tag pre) = Skip

axiom simpl_foreach_1: forall low high: int, body: (int -> protocol).
      low <= high ->
      simpl(Foreach low high body) = Seq (body low) (Foreach (low + 1) high body)

axiom simpl_foreach_2: forall low high: int, body: (int -> protocol).
      low > high ->
      simpl(Foreach low high body) = Skip

axiom simpl_while_1: forall n: int, body: protocol.
      n > 0 ->
      simpl(While n body) = Seq body (While (n-1) body)

axiom simpl_while_2: forall n: int, body: protocol.
      n <= 0 ->
      simpl(While n body) = Skip

axiom simpl_Skip: simpl(Skip) = Skip

(* -------------------------------------------------------------------- *)
(* --- Split                                                        --- *)
(* -------------------------------------------------------------------- *)

function split (p: protocol) (c : int): protocol

axiom split_foreach1: forall low high c: int, body: (int -> protocol).
      low <= c <= high ->
      split (Foreach low high body) c = Seq (Foreach low (c-1) body) (Foreach c high body)

axiom split_foreach2: forall low high c: int, body: (int -> protocol).
      low <= high < c ->
      split (Foreach low high body) c = Seq (Foreach low high body) (Foreach c high body)

axiom split_foreach3: forall low high c: int, body: (int -> protocol).
      c < low <= high ->
      split (Foreach low high body) c = Seq (Foreach low c body) (Foreach low high body)

axiom split_while1: forall n c: int, body: protocol.
      0 <= c <= n ->
      split (While n body) c = Seq (While c body) (While (n-c) body)

axiom split_while2: forall n c: int, body: protocol.
      0 <= n < c ->
      split (While n body) c = Seq (While n body) (While (n-c) body)

axiom split_while3: forall n c: int, body: protocol.
      c < 0 <= n ->
      split (While n body) c = Seq (While c body) (While n body)

(* -------------------------------------------------------------------- *)
(* --- Assoc                                                        --- *)
(* -------------------------------------------------------------------- *)

function assoc (p:protocol): protocol

axiom Assoc: forall h q p: protocol. assoc (Seq (Seq h q) p) = Seq h (Seq q p)

(* -------------------------------------------------------------------- *)
(* --- GetFirst                                                        --- *)
(* -------------------------------------------------------------------- *)

let rec function getFirst (p: protocol) : protocol variant {p} =
        match p with
        | Seq h _ -> getFirst h
        | p -> p
        end

(* -------------------------------------------------------------------- *)
(* --- GetNext                                                        --- *)
(* -------------------------------------------------------------------- *)

let rec function aux (p: protocol) : option protocol variant {p} =
          match p with
          | Seq h q ->
                   match (aux h) with
                   | None -> Some q
                   | Some p ->  Some (Seq p q)
                   end
          | _ -> None
          end

let function getNext (p: protocol): protocol =
        match aux p with
        | None -> Skip
        | Some p -> p
        end

end

module MPI_prop

use MPI_Protocol
use MPI_Protocol_Handler

predicate isLineare (p : protocol) =
        match p with
        | Seq (Seq _ _ ) _ -> false
        | _ -> true
        end

predicate isBasic (p : protocol) =
        match p with
        | Seq _ _  -> false
        | _ -> true
        end

predicate isComposed (p : protocol) =
        match p with
        | Seq _ _  -> true
        | _ -> false
        end

lemma test1: forall p1,p2:protocol. isLineare (Seq p1 p2) -> getNext (Seq p1 p2) = p2

lemma test2: forall p1:protocol. isBasic p1 -> getNext p1 = Skip

lemma test3: forall p1,p2:protocol. isLineare (Seq p1 p2) -> getFirst (Seq p1 p2) = p1

lemma test4: forall p1:protocol. isBasic p1 -> getFirst p1 = p1

lemma test5: forall p1:protocol. isBasic p1 -> p1 = simpl (Seq (getFirst p1) (getNext p1))

lemma test6: forall p1:protocol. isComposed p1 /\ isLineare p1 -> p1 = Seq (getFirst p1 ) (getNext p1 )

end
