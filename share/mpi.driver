/**************************************************************************/
/*  This file is part of MPI-V plug-in of Frama-C.                        */
/*                                                                        */
/*  Copyright (C) 2020 Lionel Blatter                                     */
/*                                                                        */
/*  Lionel Blatter <lionel.blatter@kit.edu>                               */
/*                                                                        */
/*  you can redistribute it and/or modify it under the terms of the GNU   */
/*  Lesser General Public License as published by the Free Software       */
/*  Foundation, version 2.1.                                              */
/*                                                                        */
/*  It is distributed in the hope that it will be useful,                 */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         */
/*  GNU Lesser General Public License for more details.                   */
/*                                                                        */
/*  See the GNU Lesser General Public License version 2.1                 */
/*  for more details (enclosed in the file LICENSE).                      */
/**************************************************************************/

library mpi:

type list = "\\list <int>";

type "mpi_datatype" = "mpi_datatype";

type "mpi_op" = "mpi_op";

type "logic_protocol" = "protocol";

logic integer "MPI_COMM_WORLD_size_ACSL" = "size";

why3.file += "protocol.why:MPI_Protocol";

logic mpi_datatype "get_mpi_char" = "get_mpi_char";
logic mpi_datatype "get_mpi_int" =  "get_mpi_int";
logic mpi_datatype "get_mpi_float" = "get_mpi_float";

logic mpi_op "get_mpi_max" = "get_mpi_max";
logic mpi_op "get_mpi_min" = "get_mpi_min";
logic mpi_op "get_mpi_sum" = "get_mpi_sum";
logic mpi_op "get_mpi_prod" = "get_mpi_prod";
logic mpi_op "get_mpi_land" = "get_mpi_land";
logic mpi_op "get_mpi_band" = "get_mpi_band";
logic mpi_op "get_mpi_lor" = "get_mpi_lor";
logic mpi_op "get_mpi_bor" = "get_mpi_bor";
logic mpi_op "get_mpi_lxor" = "get_mpi_lxor";
logic mpi_op "get_mpi_bxor" = "get_mpi_bxor";
logic mpi_op "get_mpi_maxloc" = "get_mpi_maxloc";
logic mpi_op "get_mpi_minloc" = "get_mpi_minloc";
logic mpi_op "get_mpi_replace" = "get_mpi_replace";
logic mpi_op "get_mpi_no_op" = "get_mpi_no_op";

logic integer "MPI_COMM_WORLD_rank_ACSL" = "rank";

logic logic_protocol "seq" (logic_protocol,logical_protocol) = "seq";

predicate "isMessage" (logic_protocol) = "isMessage";
predicate "isForeach" (logic_protocol) = "isForeach";
predicate "isSkip" (logic_protocol) = "isSkip";
predicate "isBroadcast" (logic_protocol) = "isBroadcast";
predicate "isGather" (logic_protocol) = "isGather";
predicate "isAllgather" (logic_protocol) = "isAllgather";
predicate "isScatter" (logic_protocol) ="isScatter";
predicate "isReduce" (logic_protocol) = "isReduce";
predicate "isAllreduce" (logic_protocol) = "isAllreduce";

predicate "isMessageforIntSend" (logic_protocol,integer,integer,integer,list) = "isMessageforIntSend";
predicate "isMessageforIntRecv" (logic_protocol,integer,integer,integer) = "isMessageforIntRecv";
predicate "isforIntBroadcast" (logic_protocol,integer,integer,list) = "isforIntBroadcast";
predicate "isforIntGhostBroadcast" (logic_protocol,integer,integer,list) = "isforIntGhostBroadcast";

predicate "isforGather" (logic_protocol,integer,integer,mpi_datatype) = "isforGather";
predicate "isforAllgather" (logic_protocol,integer,mpi_datatype) = "isforAllgather";
predicate "isforScatter" (logic_protocol,integer,integer,mpi_datatype) = "isforScatter";
predicate "isforReduce" (logic_protocol,integer,integer,mpi_datatype,mpi_op) = "isforReduce";
predicate "isforAllreduce" (logic_protocol,integer,mpi_datatype,mpi_op) = "isforAllreduce";

logic logic_protocol "simpl" (logic_protocol) = "simpl";
logic logic_protocol "split" (logic_protocol,integer) = "split";
logic logic_protocol "split_right" (logic_protocol,integer) = "split_right";
logic logic_protocol "assoc" (logic_protocol) = "assoc";
logic logic_protocol "getFirst" (logic_protocol) = "getFirst";
logic logic_protocol "getNext" (logic_protocol) = "getNext";
logic logic_protocol "fsimpl" (logic_protocol) = "fsimpl";
logic logic_protocol "getLeft" (logic_protocol) = "getLeft";
logic logic_protocol "getRight" (logic_protocol) = "getRight";

predicate "predIntMessage" (logic_protocol,list) = "predIntMessage";
predicate "isPredIntMessage" (logic_protocol,list) = "isPredIntMessage";
predicate "predIntBroadcast" (logic_protocol,list) = "predIntBroadcast";
predicate "countiIntBroadcast" (logic_protocol,logic_protocol,logic_protocol,list) = "countiIntBroadcast";

why3.file += "protocol.why:MPI_Protocol_Handler";
